{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aryan\\\\OneDrive\\\\Desktop\\\\PROJECT\\\\virtual_lab\\\\src\\\\Layout\\\\SQL\\\\Joins.js\";\nimport React from 'react';\nimport Layout from '../Layout';\nimport SqlMenu from './SqlMenu';\nimport one from \"./sqljoin_.PNG\";\nimport two from \"./sqljoin_2.PNG\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Joins = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-flui m-3 p-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-3\",\n            children: /*#__PURE__*/_jsxDEV(SqlMenu, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 13,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-9\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"SQL Joins\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 6\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"SQL joins are fundamental operations that allow you to combine rows from two or more tables based on a related column between them. Joining tables enables you to retrieve data from multiple tables and present it as a single, combined result set. SQL offers various types of joins, each serving different purposes in retrieving data. Let's explore SQL joins in depth:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 20,\n                columnNumber: 1\n              }, this), \"Basic Join Types:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 21,\n                columnNumber: 18\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 22,\n                columnNumber: 1\n              }, this), \"INNER JOIN:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 23,\n                columnNumber: 12\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 24,\n                columnNumber: 1\n              }, this), \"The most common join type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 25,\n                columnNumber: 27\n              }, this), \"Returns only the rows where there is a match between the columns in both tables.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 26,\n                columnNumber: 81\n              }, this), \"The result set includes only the common values from both tables.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 65\n              }, this), \"LEFT JOIN (LEFT OUTER JOIN):\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 29\n              }, this), \"Returns all rows from the left table and matching rows from the right table.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 77\n              }, this), \"If there's no match in the right table, NULL values are included for columns from the right table.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 99\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 108\n              }, this), \"RIGHT JOIN (RIGHT OUTER JOIN):\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 31\n              }, this), \"Similar to a LEFT JOIN, but returns all rows from the right table and matching rows from the left table.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 105\n              }, this), \"If there's no match in the left table, NULL values are included for columns from the left table.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 97\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 106\n              }, this), \"FULL JOIN (FULL OUTER JOIN):\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 29\n              }, this), \"Returns all rows from both tables, including matches and non-matches.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 70\n              }, this), \"If there's no match in either table, NULL values are included for the non-matching side.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 89\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 98\n              }, this), \"Advanced Join Types:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 1\n              }, this), \"SELF JOIN:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 11\n              }, this), \"A join where a table is joined with itself.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 44\n              }, this), \"Useful for comparing rows within the same table, often using aliases to differentiate between the instances of the table.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 122\n              }, this), \"CROSS JOIN (CARTESIAN JOIN):\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 29\n              }, this), \"Generates all possible combinations of rows from two or more tables.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 69\n              }, this), \"Usually results in a large number of rows, which can be impractical with large tables.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 87\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 96\n              }, this), \"NATURAL JOIN:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 14\n              }, this), \"Automatically matches columns with the same name in both tables.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 65\n              }, this), \"It's important to be cautious with this join, as changes in column names can lead to unexpected behavior.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 106\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 115\n              }, this), \"JOIN with USING Clause:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 24\n              }, this), \"Similar to a natural join, but you explicitly specify the columns to be used for matching.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 91\n              }, this), \"Helps avoid ambiguities that might arise from same-named columns in different tables.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 86\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 95\n              }, this), \"JOIN with ON Clause:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 21\n              }, this), \"The most flexible type of join.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 32\n              }, this), \"Uses a condition specified in the ON clause to determine which rows to combine.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 80\n              }, this), \"You can use any valid condition to control the matching behavior.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 66\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 75\n              }, this), \"Example:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 9\n              }, this), \"Consider two tables: \\\"Customers\\\" and \\\"Orders.\\\" We'll use these tables to illustrate different types of joins:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 110\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 1\n              }, this), \"Customers Table:\", /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: one,\n                  alt: \"Image of SqlJoin_1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 3\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 1\n              }, this), \"Orders Table:\", /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: two,\n                  alt: \"Image of SqlJoin_\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 3\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 1\n              }, this), \"Example queries:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 17\n              }, this), \"INNER JOIN: Retrieve orders and customer names for matched records.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 68\n              }, this), \"SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderAmount\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 66\n              }, this), \"FROM Orders\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 12\n              }, this), \"INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 66\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 1\n              }, this), \"LEFT JOIN: Retrieve all orders and customer names, including unmatched records with NULL customer names.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 105\n              }, this), \"SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderAmount\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 66\n              }, this), \"FROM Orders\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 12\n              }, this), \"LEFT JOIN Customers ON Orders.CustomerID = Customers.CustomerID;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 65\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 1\n              }, this), \"FULL JOIN: Retrieve all orders and customer names, including unmatched records from both sides.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 96\n              }, this), \"SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderAmount\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 66\n              }, this), \"FROM Orders\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 12\n              }, this), \"FULL JOIN Customers ON Orders.CustomerID = Customers.CustomerID;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 65\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 1\n              }, this), \"SQL joins are essential for combining data from multiple tables, allowing you to create more complex and informative result sets. Understanding the types of joins available and their characteristics is crucial for effective querying in a relational database system.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 1\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 6\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 2\n  }, this);\n};\n_c = Joins;\nexport default Joins;\nvar _c;\n$RefreshReg$(_c, \"Joins\");","map":{"version":3,"names":["React","Layout","SqlMenu","one","two","jsxDEV","_jsxDEV","Joins","children","className","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/aryan/OneDrive/Desktop/PROJECT/virtual_lab/src/Layout/SQL/Joins.js"],"sourcesContent":["import React from 'react'\r\nimport Layout from '../Layout'\r\nimport SqlMenu from './SqlMenu'\r\nimport one from \"./sqljoin_.PNG\";\r\nimport two from \"./sqljoin_2.PNG\";\r\nconst Joins = () => {\r\n  return (\r\n\t<div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col-md-3\">\r\n\t\t\t   <SqlMenu/>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <h1>SQL Joins</h1>\r\n\t\t\t\t <p>\r\n\t\t\t\t SQL joins are fundamental operations that allow you to combine rows from two or more tables based on a related column between them. Joining tables enables you to retrieve data from multiple tables and present it as a single, combined result set. SQL offers various types of joins, each serving different purposes in retrieving data. Let's explore SQL joins in depth:\r\n<br></br>\r\nBasic Join Types:<br></br>\r\n<br></br>\r\nINNER JOIN:<br></br>\r\n<br></br>\r\nThe most common join type.<br></br>\r\nReturns only the rows where there is a match between the columns in both tables.<br></br>\r\nThe result set includes only the common values from both tables.<br></br>\r\nLEFT JOIN (LEFT OUTER JOIN):<br></br>\r\n\r\nReturns all rows from the left table and matching rows from the right table.<br></br>\r\nIf there's no match in the right table, NULL values are included for columns from the right table.<br></br><br></br>\r\nRIGHT JOIN (RIGHT OUTER JOIN):<br></br>\r\n\r\nSimilar to a LEFT JOIN, but returns all rows from the right table and matching rows from the left table.<br></br>\r\nIf there's no match in the left table, NULL values are included for columns from the left table.<br></br><br></br>\r\nFULL JOIN (FULL OUTER JOIN):<br></br>\r\n\r\nReturns all rows from both tables, including matches and non-matches.<br></br>\r\nIf there's no match in either table, NULL values are included for the non-matching side.<br></br><br></br>\r\nAdvanced Join Types:<br></br>\r\n<br></br>\r\nSELF JOIN:<br></br>\r\n\r\nA join where a table is joined with itself.<br></br>\r\nUseful for comparing rows within the same table, often using aliases to differentiate between the instances of the table.<br></br>\r\nCROSS JOIN (CARTESIAN JOIN):<br></br>\r\n\r\nGenerates all possible combinations of rows from two or more tables.<br></br>\r\nUsually results in a large number of rows, which can be impractical with large tables.<br></br><br></br>\r\nNATURAL JOIN:<br></br>\r\n\r\nAutomatically matches columns with the same name in both tables.<br></br>\r\nIt's important to be cautious with this join, as changes in column names can lead to unexpected behavior.<br></br><br></br>\r\nJOIN with USING Clause:<br></br>\r\n\r\nSimilar to a natural join, but you explicitly specify the columns to be used for matching.<br></br>\r\nHelps avoid ambiguities that might arise from same-named columns in different tables.<br></br><br></br>\r\nJOIN with ON Clause:<br></br>\r\n\r\nThe most flexible type of join.<br></br>\r\nUses a condition specified in the ON clause to determine which rows to combine.<br></br>\r\nYou can use any valid condition to control the matching behavior.<br></br><br></br>\r\nExample:<br></br>\r\n\r\nConsider two tables: \"Customers\" and \"Orders.\" We'll use these tables to illustrate different types of joins:<br></br>\r\n<br></br>\r\nCustomers Table:\r\n<div>\r\n  <img src={one} alt=\"Image of SqlJoin_1\" />\r\n</div>\r\nOrders Table:\r\n<div>\r\n  <img src={two} alt=\"Image of SqlJoin_\" />\r\n</div>\r\nExample queries:<br></br>\r\nINNER JOIN: Retrieve orders and customer names for matched records.<br></br>\r\nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderAmount<br></br>\r\nFROM Orders<br></br>\r\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;<br></br>\r\n<br></br>\r\nLEFT JOIN: Retrieve all orders and customer names, including unmatched records with NULL customer names.<br></br>\r\nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderAmount<br></br>\r\nFROM Orders<br></br>\r\nLEFT JOIN Customers ON Orders.CustomerID = Customers.CustomerID;<br></br>\r\n<br></br>\r\nFULL JOIN: Retrieve all orders and customer names, including unmatched records from both sides.<br></br>\r\nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderAmount<br></br>\r\nFROM Orders<br></br>\r\nFULL JOIN Customers ON Orders.CustomerID = Customers.CustomerID;<br></br>\r\n<br></br>\r\nSQL joins are essential for combining data from multiple tables, allowing you to create more complex and informative result sets. Understanding the types of joins available and their characteristics is crucial for effective querying in a relational database system.\r\n<br></br>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t\t </p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default Joins\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}